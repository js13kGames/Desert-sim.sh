const test = require('tape')
const colors = require('../../dist/rgb-256.cjs.js')

module.exports = () => {
  test('RGB_256', t => {
    t.plan(1)

    t.same(
      colors.RGB_256,
      [
        'rgb(0,0,0)',
        'rgb(0,0,85)',
        'rgb(0,0,170)',
        'rgb(0,0,255)',
        'rgb(0,36,0)',
        'rgb(0,36,85)',
        'rgb(0,36,170)',
        'rgb(0,36,255)',
        'rgb(0,73,0)',
        'rgb(0,73,85)',
        'rgb(0,73,170)',
        'rgb(0,73,255)',
        'rgb(0,109,0)',
        'rgb(0,109,85)',
        'rgb(0,109,170)',
        'rgb(0,109,255)',
        'rgb(0,146,0)',
        'rgb(0,146,85)',
        'rgb(0,146,170)',
        'rgb(0,146,255)',
        'rgb(0,182,0)',
        'rgb(0,182,85)',
        'rgb(0,182,170)',
        'rgb(0,182,255)',
        'rgb(0,219,0)',
        'rgb(0,219,85)',
        'rgb(0,219,170)',
        'rgb(0,219,255)',
        'rgb(0,255,0)',
        'rgb(0,255,85)',
        'rgb(0,255,170)',
        'rgb(0,255,255)',
        'rgb(36,0,0)',
        'rgb(36,0,85)',
        'rgb(36,0,170)',
        'rgb(36,0,255)',
        'rgb(36,36,0)',
        'rgb(36,36,85)',
        'rgb(36,36,170)',
        'rgb(36,36,255)',
        'rgb(36,73,0)',
        'rgb(36,73,85)',
        'rgb(36,73,170)',
        'rgb(36,73,255)',
        'rgb(36,109,0)',
        'rgb(36,109,85)',
        'rgb(36,109,170)',
        'rgb(36,109,255)',
        'rgb(36,146,0)',
        'rgb(36,146,85)',
        'rgb(36,146,170)',
        'rgb(36,146,255)',
        'rgb(36,182,0)',
        'rgb(36,182,85)',
        'rgb(36,182,170)',
        'rgb(36,182,255)',
        'rgb(36,219,0)',
        'rgb(36,219,85)',
        'rgb(36,219,170)',
        'rgb(36,219,255)',
        'rgb(36,255,0)',
        'rgb(36,255,85)',
        'rgb(36,255,170)',
        'rgb(36,255,255)',
        'rgb(73,0,0)',
        'rgb(73,0,85)',
        'rgb(73,0,170)',
        'rgb(73,0,255)',
        'rgb(73,36,0)',
        'rgb(73,36,85)',
        'rgb(73,36,170)',
        'rgb(73,36,255)',
        'rgb(73,73,0)',
        'rgb(73,73,85)',
        'rgb(73,73,170)',
        'rgb(73,73,255)',
        'rgb(73,109,0)',
        'rgb(73,109,85)',
        'rgb(73,109,170)',
        'rgb(73,109,255)',
        'rgb(73,146,0)',
        'rgb(73,146,85)',
        'rgb(73,146,170)',
        'rgb(73,146,255)',
        'rgb(73,182,0)',
        'rgb(73,182,85)',
        'rgb(73,182,170)',
        'rgb(73,182,255)',
        'rgb(73,219,0)',
        'rgb(73,219,85)',
        'rgb(73,219,170)',
        'rgb(73,219,255)',
        'rgb(73,255,0)',
        'rgb(73,255,85)',
        'rgb(73,255,170)',
        'rgb(73,255,255)',
        'rgb(109,0,0)',
        'rgb(109,0,85)',
        'rgb(109,0,170)',
        'rgb(109,0,255)',
        'rgb(109,36,0)',
        'rgb(109,36,85)',
        'rgb(109,36,170)',
        'rgb(109,36,255)',
        'rgb(109,73,0)',
        'rgb(109,73,85)',
        'rgb(109,73,170)',
        'rgb(109,73,255)',
        'rgb(109,109,0)',
        'rgb(109,109,85)',
        'rgb(109,109,170)',
        'rgb(109,109,255)',
        'rgb(109,146,0)',
        'rgb(109,146,85)',
        'rgb(109,146,170)',
        'rgb(109,146,255)',
        'rgb(109,182,0)',
        'rgb(109,182,85)',
        'rgb(109,182,170)',
        'rgb(109,182,255)',
        'rgb(109,219,0)',
        'rgb(109,219,85)',
        'rgb(109,219,170)',
        'rgb(109,219,255)',
        'rgb(109,255,0)',
        'rgb(109,255,85)',
        'rgb(109,255,170)',
        'rgb(109,255,255)',
        'rgb(146,0,0)',
        'rgb(146,0,85)',
        'rgb(146,0,170)',
        'rgb(146,0,255)',
        'rgb(146,36,0)',
        'rgb(146,36,85)',
        'rgb(146,36,170)',
        'rgb(146,36,255)',
        'rgb(146,73,0)',
        'rgb(146,73,85)',
        'rgb(146,73,170)',
        'rgb(146,73,255)',
        'rgb(146,109,0)',
        'rgb(146,109,85)',
        'rgb(146,109,170)',
        'rgb(146,109,255)',
        'rgb(146,146,0)',
        'rgb(146,146,85)',
        'rgb(146,146,170)',
        'rgb(146,146,255)',
        'rgb(146,182,0)',
        'rgb(146,182,85)',
        'rgb(146,182,170)',
        'rgb(146,182,255)',
        'rgb(146,219,0)',
        'rgb(146,219,85)',
        'rgb(146,219,170)',
        'rgb(146,219,255)',
        'rgb(146,255,0)',
        'rgb(146,255,85)',
        'rgb(146,255,170)',
        'rgb(146,255,255)',
        'rgb(182,0,0)',
        'rgb(182,0,85)',
        'rgb(182,0,170)',
        'rgb(182,0,255)',
        'rgb(182,36,0)',
        'rgb(182,36,85)',
        'rgb(182,36,170)',
        'rgb(182,36,255)',
        'rgb(182,73,0)',
        'rgb(182,73,85)',
        'rgb(182,73,170)',
        'rgb(182,73,255)',
        'rgb(182,109,0)',
        'rgb(182,109,85)',
        'rgb(182,109,170)',
        'rgb(182,109,255)',
        'rgb(182,146,0)',
        'rgb(182,146,85)',
        'rgb(182,146,170)',
        'rgb(182,146,255)',
        'rgb(182,182,0)',
        'rgb(182,182,85)',
        'rgb(182,182,170)',
        'rgb(182,182,255)',
        'rgb(182,219,0)',
        'rgb(182,219,85)',
        'rgb(182,219,170)',
        'rgb(182,219,255)',
        'rgb(182,255,0)',
        'rgb(182,255,85)',
        'rgb(182,255,170)',
        'rgb(182,255,255)',
        'rgb(219,0,0)',
        'rgb(219,0,85)',
        'rgb(219,0,170)',
        'rgb(219,0,255)',
        'rgb(219,36,0)',
        'rgb(219,36,85)',
        'rgb(219,36,170)',
        'rgb(219,36,255)',
        'rgb(219,73,0)',
        'rgb(219,73,85)',
        'rgb(219,73,170)',
        'rgb(219,73,255)',
        'rgb(219,109,0)',
        'rgb(219,109,85)',
        'rgb(219,109,170)',
        'rgb(219,109,255)',
        'rgb(219,146,0)',
        'rgb(219,146,85)',
        'rgb(219,146,170)',
        'rgb(219,146,255)',
        'rgb(219,182,0)',
        'rgb(219,182,85)',
        'rgb(219,182,170)',
        'rgb(219,182,255)',
        'rgb(219,219,0)',
        'rgb(219,219,85)',
        'rgb(219,219,170)',
        'rgb(219,219,255)',
        'rgb(219,255,0)',
        'rgb(219,255,85)',
        'rgb(219,255,170)',
        'rgb(219,255,255)',
        'rgb(255,0,0)',
        'rgb(255,0,85)',
        'rgb(255,0,170)',
        'rgb(255,0,255)',
        'rgb(255,36,0)',
        'rgb(255,36,85)',
        'rgb(255,36,170)',
        'rgb(255,36,255)',
        'rgb(255,73,0)',
        'rgb(255,73,85)',
        'rgb(255,73,170)',
        'rgb(255,73,255)',
        'rgb(255,109,0)',
        'rgb(255,109,85)',
        'rgb(255,109,170)',
        'rgb(255,109,255)',
        'rgb(255,146,0)',
        'rgb(255,146,85)',
        'rgb(255,146,170)',
        'rgb(255,146,255)',
        'rgb(255,182,0)',
        'rgb(255,182,85)',
        'rgb(255,182,170)',
        'rgb(255,182,255)',
        'rgb(255,219,0)',
        'rgb(255,219,85)',
        'rgb(255,219,170)',
        'rgb(255,219,255)',
        'rgb(255,255,0)',
        'rgb(255,255,85)',
        'rgb(255,255,170)',
        'rgb(255,255,255)',
      ],
      'generates expected RGB color list'
    )

    t.end()
  })
}
